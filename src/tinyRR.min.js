import React from 'react'

export const Context = React.createContext(null);

export class Provider extends React.Component {
    constructor(props) {
      super(props)
      const { store } = props;
      this.state = {
        ...store
      }
    }
    componentDidMount(){
      this.setState({...this.state.getState(), ...this.state})
    }
    dispatch = (payload) =>{
      this.state.dispatch(payload);
      this.setState({...this.state, ...this.state.getState()}, ()=>console.log(this.state));
    }
    render() {
      let {children} = this.props;
      let value = {...this.state, dispatch: this.dispatch}
      const TinyContext = this.props.context || Context;
      return (
        <TinyContext.Provider value={value}>
        {children}
        </TinyContext.Provider>
      )
    }
  }

function mapDispatchToProps(functions, dispatch, props){
    return functions(dispatch, props);
}

function mapStateToProps(propsList, ownProps){
    return {...propsList, ...ownProps}
}

export function connect(mapState, mapDispatch){
    return (Component)=>{
      return function Wrapper(propsList){
        console.log(mapDispatch instanceof Function)
        return (
          <Context.Consumer>
          { 
           (context) =>
           {
           let newProps = mapStateToProps(propsList, mapState(context.getState()));
           console.log(context.dispatch)
           let newDispatch = (mapDispatch instanceof Function)? mapDispatchToProps(mapDispatch, context.dispatch, newProps) : {};
           console.log(newDispatch)
           return <Component {...newProps} getState={context.getState} dispatch={context.dispatch} {...newDispatch}/>
           }
          }   
          </Context.Consumer>
        )
      }
    }
  }

export function createStore (reducer, initialState={}){
    let reducers = reducer;
    let state = (Object.keys(initialState).length > 0 ? initialState: reducer(undefined, {type: ''}));
    const dispatch= (action) =>{
        state = reducers(state, action);
    }
    const getState = () => {return state}
    return {
        dispatch,
        getState
    }
}

export function combineReducers(reducers){
    return (state = {}, action) => {
        let reduced =  Object.keys(reducers).reduce(
          (nextState, key)=>{
            nextState[key] = reducers[key](state[key], action);
            return nextState
          }, {}
        )
        return reduced;
    }
}

  export default {connect, Provider, createStore, combineReducers}